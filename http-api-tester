#!/bin/bash

test_case_directory=$1
if [ -z "$test_case_directory" ]; then
  echo "Usage: http-api-tester <test_case_directory>"
  exit 1
fi

if [ ! -d "$test_case_directory" ]; then
  echo "Test case directory $test_case_directory does not exist"
  exit 1
fi

function test {
  test_case=$1
  test_case_name="$(basename "${test_case}")"

  echo -e "\033[1m$test_case_name\033[0m:"

  method=$(cat $test_case/method)
  if [ -z "$method" ]; then
    method_subcommand=""
  else
    method_subcommand="-X $method"
  fi

  url=$(cat $test_case/url)
  if [ -z "$url" ]; then
    url_subcommand="localhost"
  else
    url_subcommand="$url"
  fi

  request_data=$(cat $test_case/request-data)
  if [ -z "$request_data" ]; then
    request_data_subcommand=""
  else
    request_data_subcommand="-d @$test_case/request-data"
  fi

  if [ -r "$test_case/before" ]; then
    $test_case/before
  fi

  mkdir actual 2> /dev/null
  command="curl -s --write-out %{http_code}\n --output $test_case/actual/response-data $method_subcommand $request_data_subcommand $url_subcommand"
  echo "  command:"
  echo "    - $command > $test_case/actual/response-curl"
  $command > $test_case/actual/response-curl

  function compare {
    actual="$test_case/actual/$1"
    expected="$test_case/expected/$1"
    cmp --silent $actual $expected
    local status=$?
    if [ $status -ne 0 ]; then
      echo -e "    - \033[0;31m$actual did not match $expected\033[0m" >&2
    else
      echo -e "    - \033[0;32m$actual matched $expected\033[0m"
    fi
    return $status
  }

  echo "  result:"
  if [ -r $test_case/expected/response-data ]; then
    cat $test_case/actual/response-data | jq . > $test_case/actual/response-data.json
    cat $test_case/expected/response-data | jq . > $test_case/expected/response-data.json
    compare response-data.json
  fi

  if [ -r $test_case/expected/http-status ]; then
    cat $test_case/actual/response-curl
  fi

}

for test_case in $test_case_directory/*; do
  [ -d "${test_case}" ] || continue
  test $test_case
done
